apiVersion: v1
kind: Namespace
metadata:
  name: claude-monitoring
  labels:
    name: claude-monitoring
    purpose: monitoring

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: claude-monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: claude-monitoring

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: claude-monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      # Claude Manager metrics
      - job_name: 'claude-manager'
        scrape_interval: 10s
        kubernetes_sd_configs:
        - role: service
          namespaces:
            names:
            - claude-manager
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: claude-manager-service
        - source_labels: [__meta_kubernetes_service_port_name]
          action: keep
          regex: http
        - source_labels: [__address__]
          target_label: __address__
          regex: (.+)
          replacement: ${1}
        - target_label: __metrics_path__
          replacement: /api/monitoring/metrics

      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      # Claude Code project pods
      - job_name: 'claude-code-projects'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app]
          action: keep
          regex: claude-dev-env
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      # Self monitoring
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: claude-monitoring
data:
  claude-manager.yml: |
    groups:
      - name: claude-manager.rules
        rules:
          # High-level service health
          - record: claude_manager:up
            expr: up{job="claude-manager"}

          # Request rate by status code
          - record: claude_manager:http_requests_rate
            expr: rate(http_requests_total[5m])
            labels:
              service: "claude-manager"

          # Error rate percentage
          - record: claude_manager:error_rate
            expr: rate(http_requests_total{status_code=~"5.."}[5m]) / rate(http_requests_total[5m]) * 100
            labels:
              service: "claude-manager"

          # P95 response time
          - record: claude_manager:response_time_p95
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))
            labels:
              service: "claude-manager"

      - name: claude-manager.alerts
        rules:
          # Service down alert
          - alert: ClaudeManagerDown
            expr: claude_manager:up == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Claude Manager service is down"
              description: "Claude Manager has been down for more than 1 minute."

          # High error rate alert
          - alert: ClaudeManagerHighErrorRate
            expr: claude_manager:error_rate > 5
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Claude Manager high error rate"
              description: "Error rate is {{ $value }}% for the last 5 minutes."

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: claude-monitoring
  labels:
    app: prometheus
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--web.enable-lifecycle'
          - '--web.route-prefix=/'
        ports:
        - containerPort: 9090
          name: http
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        - name: rules-volume
          mountPath: /etc/prometheus/rules
        - name: storage-volume
          mountPath: /prometheus
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65534
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
      - name: rules-volume
        configMap:
          name: prometheus-rules
      - name: storage-volume
        emptyDir: {}
      securityContext:
        fsGroup: 65534

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: claude-monitoring
  labels:
    app: prometheus
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: http
  selector:
    app: prometheus

---
# NodePort service for external access (optional)
apiVersion: v1
kind: Service
metadata:
  name: prometheus-nodeport
  namespace: claude-monitoring
  labels:
    app: prometheus
    component: monitoring
spec:
  type: NodePort
  ports:
  - port: 9090
    targetPort: 9090
    nodePort: 30090
    protocol: TCP
    name: http
  selector:
    app: prometheus