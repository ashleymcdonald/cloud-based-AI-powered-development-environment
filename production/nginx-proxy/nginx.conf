# Main nginx configuration for Claude Code Project Router with SSO Authentication
# Single Namespace Architecture with nginx-sso integration

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format with SSO user tracking
    log_format main '$remote_addr - $http_x_username [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'project="$project_name" sso_user="$http_x_username"';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # Buffer settings for better performance
    client_body_buffer_size 128k;
    client_max_body_size 50m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Proxy settings
    proxy_buffering on;
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    proxy_temp_file_write_size 256k;
    proxy_connect_timeout 30s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;

    # Upstream for nginx-sso (when SSO is enabled)
    upstream nginx_sso {
        server 127.0.0.1:8082;
    }

    # Upstream definitions for load balancing
    upstream claude_manager {
        server claude-manager-service.${CLAUDE_NAMESPACE}.svc.cluster.local:3000;
        keepalive 32;
    }

    # Map for dynamic project routing (extract project name from URI)
    map $request_uri $project_name {
        ~^/([^/]+)/ $1;
        default "";
    }

    # Map for service type based on URI pattern
    map $request_uri $service_type {
        ~^/[^/]+/api/ "agentapi";
        ~^/[^/]+/dev/ "devserver";
        default "vscode";
    }

    # Security headers
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Main server block
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Security
        server_tokens off;

        # Set namespace variable (default to claude-manager if not set)
        set $namespace "${CLAUDE_NAMESPACE}";
        if ($namespace = "") {
            set $namespace "claude-manager";
        }

        # SSO Authentication endpoints (when SSO is enabled)
        location /auth {
            if ($arg_sso_enabled != "true") {
                return 404;
            }
            proxy_pass http://nginx_sso;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # SSO Login page
        location = /login {
            if ($arg_sso_enabled != "true") {
                return 404;
            }
            proxy_pass http://nginx_sso;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Root location - redirect to manager
        location = / {
            return 301 /manager/;
        }

        # Manager interface - with optional SSO protection
        location /manager/ {
            # SSO Authentication (when enabled)
            auth_request /auth-validate;
            auth_request_set $user $upstream_http_x_username;
            auth_request_set $email $upstream_http_x_email;
            auth_request_set $groups $upstream_http_x_groups;
            
            # Pass user information to backend
            proxy_set_header X-Username $user;
            proxy_set_header X-Email $email;
            proxy_set_header X-Groups $groups;
            
            proxy_pass http://claude_manager/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;

            # Remove /manager prefix when forwarding
            rewrite ^/manager/(.*)$ /$1 break;
        }

        # API endpoints for manager - with optional SSO protection
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # SSO Authentication (when enabled)
            auth_request /auth-validate;
            auth_request_set $user $upstream_http_x_username;
            auth_request_set $email $upstream_http_x_email;
            auth_request_set $groups $upstream_http_x_groups;
            
            # Pass user information to backend
            proxy_set_header X-Username $user;
            proxy_set_header X-Email $email;
            proxy_set_header X-Groups $groups;
            
            proxy_pass http://claude_manager/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300;
        }

        # WebSocket support for manager
        location /socket.io/ {
            # SSO Authentication (when enabled)
            auth_request /auth-validate;
            auth_request_set $user $upstream_http_x_username;
            
            proxy_set_header X-Username $user;
            
            proxy_pass http://claude_manager/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
        }

        # Project-specific routing - Single Namespace Architecture with SSO
        # Routes to project-[shortname]-service.[namespace].svc.cluster.local
        location ~ ^/([a-zA-Z0-9\-]+)/ {
            set $project_shortname $1;
            
            # Skip auth for certain paths (health checks, etc.)
            if ($request_uri ~ "^/[^/]+/health") {
                set $skip_auth "1";
            }
            
            # SSO Authentication (when enabled and not skipped)
            auth_request /auth-validate;
            auth_request_set $user $upstream_http_x_username;
            auth_request_set $email $upstream_http_x_email;
            auth_request_set $groups $upstream_http_x_groups;
            
            # Pass user information to project
            proxy_set_header X-Username $user;
            proxy_set_header X-Email $email;
            proxy_set_header X-Groups $groups;

            # VS Code interface (default) - project root
            location ~ ^/([a-zA-Z0-9\-]+)/?$ {
                set $project_shortname $1;
                
                auth_request /auth-validate;
                auth_request_set $user $upstream_http_x_username;
                proxy_set_header X-Username $user;
                
                proxy_pass http://project-$project_shortname-service.$namespace.svc.cluster.local:8443/;
                include /etc/nginx/conf.d/proxy_params.conf;
            }

            # VS Code WebSocket connections
            location ~ ^/([a-zA-Z0-9\-]+)/socket\.io/ {
                set $project_shortname $1;
                
                auth_request /auth-validate;
                auth_request_set $user $upstream_http_x_username;
                proxy_set_header X-Username $user;
                
                proxy_pass http://project-$project_shortname-service.$namespace.svc.cluster.local:8443/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_read_timeout 86400;
            }

            # VS Code static assets and API
            location ~ ^/([a-zA-Z0-9\-]+)/static/ {
                set $project_shortname $1;
                
                auth_request /auth-validate;
                auth_request_set $user $upstream_http_x_username;
                proxy_set_header X-Username $user;
                
                proxy_pass http://project-$project_shortname-service.$namespace.svc.cluster.local:8443;
                include /etc/nginx/conf.d/proxy_params.conf;
            }

            # VS Code proxy routes
            location ~ ^/([a-zA-Z0-9\-]+)/proxy/ {
                set $project_shortname $1;
                
                auth_request /auth-validate;
                auth_request_set $user $upstream_http_x_username;
                proxy_set_header X-Username $user;
                
                proxy_pass http://project-$project_shortname-service.$namespace.svc.cluster.local:8443;
                include /etc/nginx/conf.d/proxy_params.conf;
            }

            # Agent API - Claude Code HTTP API
            location ~ ^/([a-zA-Z0-9\-]+)/api/ {
                set $project_shortname $1;
                
                auth_request /auth-validate;
                auth_request_set $user $upstream_http_x_username;
                proxy_set_header X-Username $user;
                
                proxy_pass http://project-$project_shortname-service.$namespace.svc.cluster.local:3284/;
                include /etc/nginx/conf.d/proxy_params.conf;
                
                # Remove project name and /api prefix
                rewrite ^/[^/]+/api/(.*)$ /$1 break;
            }

            # Development server
            location ~ ^/([a-zA-Z0-9\-]+)/dev/ {
                set $project_shortname $1;
                
                auth_request /auth-validate;  
                auth_request_set $user $upstream_http_x_username;
                proxy_set_header X-Username $user;
                
                proxy_pass http://project-$project_shortname-service.$namespace.svc.cluster.local:3000/;
                include /etc/nginx/conf.d/proxy_params.conf;
                
                # Remove project name and /dev prefix
                rewrite ^/[^/]+/dev/(.*)$ /$1 break;
            }

            # Health check for individual projects (no auth required)
            location ~ ^/([a-zA-Z0-9\-]+)/health {
                set $project_shortname $1;
                proxy_pass http://project-$project_shortname-service.$namespace.svc.cluster.local:8443/healthz;
                access_log off;
            }

            # Fallback to VS Code for any other project paths
            auth_request /auth-validate;
            auth_request_set $user $upstream_http_x_username;
            proxy_set_header X-Username $user;
            
            proxy_pass http://project-$project_shortname-service.$namespace.svc.cluster.local:8443;
            include /etc/nginx/conf.d/proxy_params.conf;
        }

        # SSO auth validation endpoint (internal use only)
        location = /auth-validate {
            internal;
            
            # Skip auth if SSO is disabled
            if ($cookie_sso_enabled != "true") {
                return 200;
            }
            
            proxy_pass http://nginx_sso/validate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Origin-URI $request_uri;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint for nginx
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Nginx metrics endpoint for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;  
            allow 192.168.0.0/16;
            allow 127.0.0.1;
            deny all;
        }

        # Security: block access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Block common attack patterns
        location ~* \.(aspx|php|jsp|cgi)$ {
            deny all;
            access_log off;
        }

        # Custom error pages
        error_page 401 /401.html;
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /401.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # HTTPS server (if SSL certificates are available)
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name your-domain.com;
    #
    #     ssl_certificate /etc/ssl/certs/your-cert.pem;
    #     ssl_certificate_key /etc/ssl/private/your-key.pem;
    #     ssl_session_timeout 1d;
    #     ssl_session_cache shared:SSL:50m;
    #     ssl_session_tickets off;
    #
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #
    #     add_header Strict-Transport-Security "max-age=63072000" always;
    #
    #     # Include the same location blocks as HTTP server
    # }

    # Load additional configuration files
    include /etc/nginx/conf.d/*.conf;
}